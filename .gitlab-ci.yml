stages:
  - test
  - lint
  - deploy

test:
  stage: test
  image: python:3
  script:
    # this configures Django application to use attached postgres database that is run on `postgres` host
    - pip install -r requirements.txt
    - python manage.py test
    - coverage run --source='.' --omit="venv/*" manage.py test
    - coverage xml
    - coverage report
  coverage: /^TOTAL.+?(\d+\%)$/
  artifacts:
    reports:
      cobertura: coverage.xml

pylint:
  stage: lint
  image: python:3.7-slim
  before_script:
    - mkdir -p public/badges public/lint
    - echo undefined > public/badges/$CI_JOB_NAME.score
    - pip install pylint_gitlab
  script:
    - pylint --exit-zero --disable=import-error --output-format=text WebApp | tee /tmp/pylint.txt
    - sed -n 's/^Your code has been rated at \([-0-9.]*\)\/.*/\1/p' /tmp/pylint.txt > public/badges/$CI_JOB_NAME.score
    - pylint --exit-zero --disable=import-error --output-format=pylint_gitlab.GitlabCodeClimateReporter WebApp > codeclimate.json
    - pylint --exit-zero --disable=import-error --output-format=pylint_gitlab.GitlabPagesHtmlReporter WebApp > public/lint/index.html
  after_script:
    - anybadge --overwrite --label $CI_JOB_NAME --value=$(cat public/badges/$CI_JOB_NAME.score) --file=public/badges/$CI_JOB_NAME.svg 4=red 6=orange 8=yellow 10=green
    - |
      echo "Your score is: $(cat public/badges/$CI_JOB_NAME.score)"
  artifacts:
    paths:
      - public
    reports:
      codequality: codeclimate.json
    when: always

pages:
  stage: deploy
  image: alpine:latest
  script:
    - echo
  artifacts:
    paths:
      - public
  only:
    refs:
      - master
